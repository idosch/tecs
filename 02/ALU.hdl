// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/02/ALU.hdl

/**
 * The ALU.  Computes a pre-defined set of functions out = f(x,y)
 * where x and y are two 16-bit inputs. The function f is selected 
 * by a set of 6 control bits denoted zx, nx, zy, ny, f, no.
 * The ALU operation can be described using the following pseudocode:
 *     if zx=1 set x = 0       // 16-bit zero constant
 *     if nx=1 set x = !x      // Bit-wise negation
 *     if zy=1 set y = 0       // 16-bit zero constant
 *     if ny=1 set y = !y      // Bit-wise negation
 *     if f=1  set out = x + y // Integer 2's complement addition
 *     else    set out = x & y // Bit-wise And
 *     if no=1 set out = !out  // Bit-wise negation
 *
 * In addition to computing out, the ALU computes two 1-bit outputs:
 *     if out=0 set zr = 1 else zr = 0 // 16-bit equality comparison
 *     if out<0 set ng = 1 else ng = 0 // 2's complement comparison
 */

CHIP ALU {

    IN  // 16-bit inputs:
        x[16], y[16],
        // Control bits:
        zx, // Zero the x input
        nx, // Negate the x input
        zy, // Zero the y input
        ny, // Negate the y input
        f,  // Function code: 1 for add, 0 for and
        no; // Negate the out output

    OUT // 16-bit output
        out[16],

        // ALU output flags
        zr, // 1 if out=0, 0 otherwise
        ng; // 1 if out<0, 0 otherwise

    PARTS:
    Not16(in[0..15]=x, out[0..15]=notx);
    Mux4Way16(a[0..15]=x, b[0..15]=notx, c[0..15]=false, d[0..15]=true, sel[0]=nx, sel[1]=zx, out[0..15]=x2);

    Not16(in[0..15]=y, out[0..15]=noty);
    Mux4Way16(a[0..15]=y, b[0..15]=noty, c[0..15]=false, d[0..15]=true, sel[0]=ny, sel[1]=zy, out[0..15]=y2);

    And16(a[0..15]=x2, b[0..15]=y2, out[0..15]=xandy);
    Not16(in[0..15]=xandy, out[0..15]=notxandy);
    //Or16(a[0..15]=x2, b[0..15]=y2, out[0..15]=xory);
    //Not16(in[0..15]=xory, out[0..15]=notxory);
    Add16(a[0..15]=x2, b[0..15]=y2, out[0..15]=xplusy);
    Not16(in[0..15]=xplusy, out[0..15]=notxplusy);
    Mux4Way16(a[0..15]=xandy, b[0..15]=notxandy, c[0..15]=xplusy, d[0..15]=notxplusy, sel[0]=no, sel[1]=f, out[0..15]=out, out[15]=ng, out[0..7]=out1, out[8..15]=out2);

    Or8Way(in=out1, out=out11);
    Or8Way(in=out2, out=out22);

    Or(a=out11, b=out22, out=zr1);
    Not(in=zr1, out=zr);

}
